// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'entities/checkpoint.dart';
import 'entities/goal.dart';
import 'entities/task.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1881036810011932458),
      name: 'Checkpoint',
      lastPropertyId: const obx_int.IdUid(3, 6331343978512154370),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7610827726889503435),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1203079135790154913),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6331343978512154370),
            name: 'finished',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1458145482174392471),
      name: 'Task',
      lastPropertyId: const obx_int.IdUid(7, 7471598068197570837),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7421325585400494966),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 530974513048107006),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2384886994792544975),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1613906021395688499),
            name: 'status',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7270171260018002348),
            name: 'dayTime',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7471598068197570837),
            name: 'parentGoalId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 7435272883056686995),
            relationTarget: 'Goal')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 5212266623199784108),
            name: 'checkpoints',
            targetId: const obx_int.IdUid(1, 1881036810011932458))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5622267691994581109),
      name: 'Goal',
      lastPropertyId: const obx_int.IdUid(6, 1597712462103899211),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 752857698456178807),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5866171995527601387),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3055245156354372647),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7556343997514342449),
            name: 'begin',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2697537407064213606),
            name: 'deadline',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1597712462103899211),
            name: 'importance',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 8603767106778413392),
            name: 'checkpoints',
            targetId: const obx_int.IdUid(1, 1881036810011932458))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 5622267691994581109),
      lastIndexId: const obx_int.IdUid(1, 7435272883056686995),
      lastRelationId: const obx_int.IdUid(2, 8603767106778413392),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [54079599871844231],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Checkpoint: obx_int.EntityDefinition<Checkpoint>(
        model: _entities[0],
        toOneRelations: (Checkpoint object) => [],
        toManyRelations: (Checkpoint object) => {},
        getId: (Checkpoint object) => object.id,
        setId: (Checkpoint object, int id) {
          object.id = id;
        },
        objectToFB: (Checkpoint object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addBool(2, object.finished);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final finishedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object =
              Checkpoint(id: idParam, finished: finishedParam, text: textParam);

          return object;
        }),
    Task: obx_int.EntityDefinition<Task>(
        model: _entities[1],
        toOneRelations: (Task object) => [object.parentGoal],
        toManyRelations: (Task object) =>
            {obx_int.RelInfo<Task>.toMany(1, object.id): object.checkpoints},
        getId: (Task object) => object.id,
        setId: (Task object, int id) {
          object.id = id;
        },
        objectToFB: (Task object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          final dayTimeOffset = fbb.writeString(object.dayTime);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addInt64(3, object.date.millisecondsSinceEpoch);
          fbb.addBool(4, object.status);
          fbb.addOffset(5, dayTimeOffset);
          fbb.addInt64(6, object.parentGoal.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final statusParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final dayTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = Task(
              id: idParam,
              text: textParam,
              status: statusParam,
              date: dateParam,
              dayTime: dayTimeParam);
          object.parentGoal.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.parentGoal.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Task>(object.checkpoints,
              store, obx_int.RelInfo<Task>.toMany(1, object.id));
          return object;
        }),
    Goal: obx_int.EntityDefinition<Goal>(
        model: _entities[2],
        toOneRelations: (Goal object) => [],
        toManyRelations: (Goal object) =>
            {obx_int.RelInfo<Goal>.toMany(2, object.id): object.checkpoints},
        getId: (Goal object) => object.id,
        setId: (Goal object, int id) {
          object.id = id;
        },
        objectToFB: (Goal object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.addOffset(2, textOffset);
          fbb.addInt64(3, object.begin.millisecondsSinceEpoch);
          fbb.addInt64(4, object.deadline.millisecondsSinceEpoch);
          fbb.addInt64(5, object.importance);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final importanceParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final beginParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final deadlineParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = Goal(
              id: idParam,
              importance: importanceParam,
              description: descriptionParam,
              text: textParam,
              begin: beginParam,
              deadline: deadlineParam);
          obx_int.InternalToManyAccess.setRelInfo<Goal>(object.checkpoints,
              store, obx_int.RelInfo<Goal>.toMany(2, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Checkpoint] entity fields to define ObjectBox queries.
class Checkpoint_ {
  /// see [Checkpoint.id]
  static final id =
      obx.QueryIntegerProperty<Checkpoint>(_entities[0].properties[0]);

  /// see [Checkpoint.text]
  static final text =
      obx.QueryStringProperty<Checkpoint>(_entities[0].properties[1]);

  /// see [Checkpoint.finished]
  static final finished =
      obx.QueryBooleanProperty<Checkpoint>(_entities[0].properties[2]);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// see [Task.id]
  static final id = obx.QueryIntegerProperty<Task>(_entities[1].properties[0]);

  /// see [Task.text]
  static final text = obx.QueryStringProperty<Task>(_entities[1].properties[1]);

  /// see [Task.date]
  static final date = obx.QueryDateProperty<Task>(_entities[1].properties[2]);

  /// see [Task.status]
  static final status =
      obx.QueryBooleanProperty<Task>(_entities[1].properties[3]);

  /// see [Task.dayTime]
  static final dayTime =
      obx.QueryStringProperty<Task>(_entities[1].properties[4]);

  /// see [Task.parentGoal]
  static final parentGoal =
      obx.QueryRelationToOne<Task, Goal>(_entities[1].properties[5]);

  /// see [Task.checkpoints]
  static final checkpoints =
      obx.QueryRelationToMany<Task, Checkpoint>(_entities[1].relations[0]);
}

/// [Goal] entity fields to define ObjectBox queries.
class Goal_ {
  /// see [Goal.id]
  static final id = obx.QueryIntegerProperty<Goal>(_entities[2].properties[0]);

  /// see [Goal.description]
  static final description =
      obx.QueryStringProperty<Goal>(_entities[2].properties[1]);

  /// see [Goal.text]
  static final text = obx.QueryStringProperty<Goal>(_entities[2].properties[2]);

  /// see [Goal.begin]
  static final begin = obx.QueryDateProperty<Goal>(_entities[2].properties[3]);

  /// see [Goal.deadline]
  static final deadline =
      obx.QueryDateProperty<Goal>(_entities[2].properties[4]);

  /// see [Goal.importance]
  static final importance =
      obx.QueryIntegerProperty<Goal>(_entities[2].properties[5]);

  /// see [Goal.checkpoints]
  static final checkpoints =
      obx.QueryRelationToMany<Goal, Checkpoint>(_entities[2].relations[0]);
}
